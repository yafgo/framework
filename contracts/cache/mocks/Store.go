// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	cache "github.com/yafgo/framework/contracts/cache"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// Add provides a mock function with given fields: key, value, sec
func (_m *Store) Add(key string, value any, sec time.Duration) bool {
	ret := _m.Called(key, value, sec)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, any, time.Duration) bool); ok {
		r0 = rf(key, value, sec)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Flush provides a mock function with given fields:
func (_m *Store) Flush() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Forever provides a mock function with given fields: key, value
func (_m *Store) Forever(key string, value any) bool {
	ret := _m.Called(key, value)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, any) bool); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Forget provides a mock function with given fields: key
func (_m *Store) Forget(key string) bool {
	ret := _m.Called(key)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Get provides a mock function with given fields: key, def
func (_m *Store) Get(key string, def any) any {
	ret := _m.Called(key, def)

	var r0 any
	if rf, ok := ret.Get(0).(func(string, any) any); ok {
		r0 = rf(key, def)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	return r0
}

// GetBool provides a mock function with given fields: key, def
func (_m *Store) GetBool(key string, def bool) bool {
	ret := _m.Called(key, def)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, bool) bool); ok {
		r0 = rf(key, def)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetInt provides a mock function with given fields: key, def
func (_m *Store) GetInt(key string, def int) int {
	ret := _m.Called(key, def)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, int) int); ok {
		r0 = rf(key, def)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetString provides a mock function with given fields: key, def
func (_m *Store) GetString(key string, def string) string {
	ret := _m.Called(key, def)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(key, def)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Has provides a mock function with given fields: key
func (_m *Store) Has(key string) bool {
	ret := _m.Called(key)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Pull provides a mock function with given fields: key, def
func (_m *Store) Pull(key string, def any) any {
	ret := _m.Called(key, def)

	var r0 any
	if rf, ok := ret.Get(0).(func(string, any) any); ok {
		r0 = rf(key, def)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	return r0
}

// Put provides a mock function with given fields: key, value, sec
func (_m *Store) Put(key string, value any, sec time.Duration) error {
	ret := _m.Called(key, value, sec)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, any, time.Duration) error); ok {
		r0 = rf(key, value, sec)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Remember provides a mock function with given fields: key, ttl, callback
func (_m *Store) Remember(key string, ttl time.Duration, callback func() any) (any, error) {
	ret := _m.Called(key, ttl, callback)

	var r0 any
	if rf, ok := ret.Get(0).(func(string, time.Duration, func() any) any); ok {
		r0 = rf(key, ttl, callback)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, time.Duration, func() any) error); ok {
		r1 = rf(key, ttl, callback)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RememberForever provides a mock function with given fields: key, callback
func (_m *Store) RememberForever(key string, callback func() any) (any, error) {
	ret := _m.Called(key, callback)

	var r0 any
	if rf, ok := ret.Get(0).(func(string, func() any) any); ok {
		r0 = rf(key, callback)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, func() any) error); ok {
		r1 = rf(key, callback)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithContext provides a mock function with given fields: ctx
func (_m *Store) WithContext(ctx context.Context) cache.Store {
	ret := _m.Called(ctx)

	var r0 cache.Store
	if rf, ok := ret.Get(0).(func(context.Context) cache.Store); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.Store)
		}
	}

	return r0
}

type mockConstructorTestingTNewStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStore(t mockConstructorTestingTNewStore) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
