// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// Config is an autogenerated mock type for the Config type
type Config struct {
	mock.Mock
}

// Add provides a mock function with given fields: name, configuration
func (_m *Config) Add(name string, configuration map[string]any) {
	_m.Called(name, configuration)
}

// Env provides a mock function with given fields: envName, defaultValue
func (_m *Config) Env(envName string, defaultValue ...any) any {
	var _ca []any
	_ca = append(_ca, envName)
	_ca = append(_ca, defaultValue...)
	ret := _m.Called(_ca...)

	var r0 any
	if rf, ok := ret.Get(0).(func(string, ...any) any); ok {
		r0 = rf(envName, defaultValue...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	return r0
}

// Get provides a mock function with given fields: path, defaultValue
func (_m *Config) Get(path string, defaultValue ...any) any {
	var _ca []any
	_ca = append(_ca, path)
	_ca = append(_ca, defaultValue...)
	ret := _m.Called(_ca...)

	var r0 any
	if rf, ok := ret.Get(0).(func(string, ...any) any); ok {
		r0 = rf(path, defaultValue...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *Config) GetAll() map[string]any {
	ret := _m.Called()

	var r0 map[string]any
	if rf, ok := ret.Get(0).(func() map[string]any); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]any)
		}
	}

	return r0
}

// GetBool provides a mock function with given fields: path, defaultValue
func (_m *Config) GetBool(path string, defaultValue ...any) bool {
	var _ca []any
	_ca = append(_ca, path)
	_ca = append(_ca, defaultValue...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, ...any) bool); ok {
		r0 = rf(path, defaultValue...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetDuration provides a mock function with given fields: path, defaultValue
func (_m *Config) GetDuration(path string, defaultValue ...any) time.Duration {
	var _ca []any
	_ca = append(_ca, path)
	_ca = append(_ca, defaultValue...)
	ret := _m.Called(_ca...)

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func(string, ...any) time.Duration); ok {
		r0 = rf(path, defaultValue...)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// GetFloat64 provides a mock function with given fields: path, defaultValue
func (_m *Config) GetFloat64(path string, defaultValue ...any) float64 {
	var _ca []any
	_ca = append(_ca, path)
	_ca = append(_ca, defaultValue...)
	ret := _m.Called(_ca...)

	var r0 float64
	if rf, ok := ret.Get(0).(func(string, ...any) float64); ok {
		r0 = rf(path, defaultValue...)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// GetInt provides a mock function with given fields: path, defaultValue
func (_m *Config) GetInt(path string, defaultValue ...any) int {
	var _ca []any
	_ca = append(_ca, path)
	_ca = append(_ca, defaultValue...)
	ret := _m.Called(_ca...)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, ...any) int); ok {
		r0 = rf(path, defaultValue...)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetInt64 provides a mock function with given fields: path, defaultValue
func (_m *Config) GetInt64(path string, defaultValue ...any) int64 {
	var _ca []any
	_ca = append(_ca, path)
	_ca = append(_ca, defaultValue...)
	ret := _m.Called(_ca...)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, ...any) int64); ok {
		r0 = rf(path, defaultValue...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetString provides a mock function with given fields: path, defaultValue
func (_m *Config) GetString(path string, defaultValue ...any) string {
	var _ca []any
	_ca = append(_ca, path)
	_ca = append(_ca, defaultValue...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...any) string); ok {
		r0 = rf(path, defaultValue...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetUint provides a mock function with given fields: path, defaultValue
func (_m *Config) GetUint(path string, defaultValue ...any) uint {
	var _ca []any
	_ca = append(_ca, path)
	_ca = append(_ca, defaultValue...)
	ret := _m.Called(_ca...)

	var r0 uint
	if rf, ok := ret.Get(0).(func(string, ...any) uint); ok {
		r0 = rf(path, defaultValue...)
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

type mockConstructorTestingTNewConfig interface {
	mock.TestingT
	Cleanup(func())
}

// NewConfig creates a new instance of Config. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConfig(t mockConstructorTestingTNewConfig) *Config {
	mock := &Config{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
